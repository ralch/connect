// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: connect/runtime/v1/event.proto

package runtimev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PushEventRequest represents a request for connect.runtime.v1.EventService.PushEvent method.
type PushEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event.
	Event *Event `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *PushEventRequest) Reset() {
	*x = PushEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_runtime_v1_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushEventRequest) ProtoMessage() {}

func (x *PushEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connect_runtime_v1_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushEventRequest.ProtoReflect.Descriptor instead.
func (*PushEventRequest) Descriptor() ([]byte, []int) {
	return file_connect_runtime_v1_event_proto_rawDescGZIP(), []int{0}
}

func (x *PushEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// PushEventResponse represents a response for connect.runtime.v1.EventService.PushEvent method.
type PushEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushEventResponse) Reset() {
	*x = PushEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_runtime_v1_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushEventResponse) ProtoMessage() {}

func (x *PushEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connect_runtime_v1_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushEventResponse.ProtoReflect.Descriptor instead.
func (*PushEventResponse) Descriptor() ([]byte, []int) {
	return file_connect_runtime_v1_event_proto_rawDescGZIP(), []int{1}
}

// Event represents an event.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Id contains the event's identifier. Producers MUST ensure that
	// source + id is unique for each distinct event. If a duplicate event is
	// re-sent (e.g. due to a network error) it MAY have the same id. Consumers
	// MAY assume that Events with identical source and id are duplicates.
	// Example: 5cc0996e-facd-11ed-9c22-325096b39f47
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Required. Source contains the context in which an event happened. Often
	// this will include information such as the type of the event source, the
	// organization publishing the event or the process that produced the event.
	// The exact syntax and semantics behind the data encoded in the URI is
	// defined by the event producer. Producers MUST ensure that source + id is
	// unique for each distinct event.
	//
	// Example: https://github.com/cloudevents, urn:uuid:6e8bc430-9c3a-11d9-9669-0800200c9a66, /cloudevents/spec/pull/123
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Required. SpecVerion is the version of the CloudEvents specification which
	// the event uses. This enables the interpretation of the context. Compliant
	// event producers MUST use a value of 1.0 when referring to this version of
	// the specification. Currently, this attribute will only have the 'major' and
	// 'minor' version numbers included in it. This allows for 'patch' changes to
	// the specification to be made without changing this property's value in the
	// serialization. Note: for 'release candidate' releases a suffix might be
	// used for testing purposes.
	SpecVersion string `protobuf:"bytes,3,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// Required. Type attribute contains a value describing the type of event
	// related to the originating occurrence. Often this attribute is used for
	// routing, observability, policy enforcement, etc.
	//
	// Example: com.github.pull_request.opened, com.example.object.deleted
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Optional. Extra attributes.
	Attributes map[string]*EventAttributeValue `protobuf:"bytes,5,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Optional. Contains the event's data.
	//
	// Types that are assignable to Data:
	//
	//	*Event_BinaryData
	//	*Event_TextData
	//	*Event_ProtoData
	Data isEvent_Data `protobuf_oneof:"data"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_runtime_v1_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_connect_runtime_v1_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_connect_runtime_v1_event_proto_rawDescGZIP(), []int{2}
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetAttributes() map[string]*EventAttributeValue {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (m *Event) GetData() isEvent_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *Event) GetBinaryData() []byte {
	if x, ok := x.GetData().(*Event_BinaryData); ok {
		return x.BinaryData
	}
	return nil
}

func (x *Event) GetTextData() string {
	if x, ok := x.GetData().(*Event_TextData); ok {
		return x.TextData
	}
	return ""
}

func (x *Event) GetProtoData() *anypb.Any {
	if x, ok := x.GetData().(*Event_ProtoData); ok {
		return x.ProtoData
	}
	return nil
}

type isEvent_Data interface {
	isEvent_Data()
}

type Event_BinaryData struct {
	// BinaryData contains the data in binary format.
	BinaryData []byte `protobuf:"bytes,6,opt,name=binary_data,json=binaryData,proto3,oneof"`
}

type Event_TextData struct {
	// TextData contains the data in string format.
	TextData string `protobuf:"bytes,7,opt,name=text_data,json=textData,proto3,oneof"`
}

type Event_ProtoData struct {
	// ProtoData contains the data in proto format.
	ProtoData *anypb.Any `protobuf:"bytes,8,opt,name=proto_data,json=protoData,proto3,oneof"`
}

func (*Event_BinaryData) isEvent_Data() {}

func (*Event_TextData) isEvent_Data() {}

func (*Event_ProtoData) isEvent_Data() {}

// EventAttributeValue represents an event attributes.
type EventAttributeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Attr:
	//
	//	*EventAttributeValue_CeBoolean
	//	*EventAttributeValue_CeInteger
	//	*EventAttributeValue_CeString
	//	*EventAttributeValue_CeBytes
	//	*EventAttributeValue_CeUri
	//	*EventAttributeValue_CeUriRef
	//	*EventAttributeValue_CeTimestamp
	Attr isEventAttributeValue_Attr `protobuf_oneof:"attr"`
}

func (x *EventAttributeValue) Reset() {
	*x = EventAttributeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_runtime_v1_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventAttributeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventAttributeValue) ProtoMessage() {}

func (x *EventAttributeValue) ProtoReflect() protoreflect.Message {
	mi := &file_connect_runtime_v1_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventAttributeValue.ProtoReflect.Descriptor instead.
func (*EventAttributeValue) Descriptor() ([]byte, []int) {
	return file_connect_runtime_v1_event_proto_rawDescGZIP(), []int{3}
}

func (m *EventAttributeValue) GetAttr() isEventAttributeValue_Attr {
	if m != nil {
		return m.Attr
	}
	return nil
}

func (x *EventAttributeValue) GetCeBoolean() bool {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeBoolean); ok {
		return x.CeBoolean
	}
	return false
}

func (x *EventAttributeValue) GetCeInteger() int32 {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeInteger); ok {
		return x.CeInteger
	}
	return 0
}

func (x *EventAttributeValue) GetCeString() string {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeString); ok {
		return x.CeString
	}
	return ""
}

func (x *EventAttributeValue) GetCeBytes() []byte {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeBytes); ok {
		return x.CeBytes
	}
	return nil
}

func (x *EventAttributeValue) GetCeUri() string {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeUri); ok {
		return x.CeUri
	}
	return ""
}

func (x *EventAttributeValue) GetCeUriRef() string {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeUriRef); ok {
		return x.CeUriRef
	}
	return ""
}

func (x *EventAttributeValue) GetCeTimestamp() *timestamppb.Timestamp {
	if x, ok := x.GetAttr().(*EventAttributeValue_CeTimestamp); ok {
		return x.CeTimestamp
	}
	return nil
}

type isEventAttributeValue_Attr interface {
	isEventAttributeValue_Attr()
}

type EventAttributeValue_CeBoolean struct {
	// CeBoolean is a boolean value.
	CeBoolean bool `protobuf:"varint,1,opt,name=ce_boolean,json=ceBoolean,proto3,oneof"`
}

type EventAttributeValue_CeInteger struct {
	// CeInteager is an integer value.
	CeInteger int32 `protobuf:"varint,2,opt,name=ce_integer,json=ceInteger,proto3,oneof"`
}

type EventAttributeValue_CeString struct {
	// CeString is a string value.
	CeString string `protobuf:"bytes,3,opt,name=ce_string,json=ceString,proto3,oneof"`
}

type EventAttributeValue_CeBytes struct {
	// CeBytes is a bytes value.
	CeBytes []byte `protobuf:"bytes,4,opt,name=ce_bytes,json=ceBytes,proto3,oneof"`
}

type EventAttributeValue_CeUri struct {
	// CeUri is a uri value.
	CeUri string `protobuf:"bytes,5,opt,name=ce_uri,json=ceUri,proto3,oneof"`
}

type EventAttributeValue_CeUriRef struct {
	// CeUriRef is a uri ref value.
	CeUriRef string `protobuf:"bytes,6,opt,name=ce_uri_ref,json=ceUriRef,proto3,oneof"`
}

type EventAttributeValue_CeTimestamp struct {
	// CeTimestamp ia a timestamp value.
	CeTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=ce_timestamp,json=ceTimestamp,proto3,oneof"`
}

func (*EventAttributeValue_CeBoolean) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeInteger) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeString) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeBytes) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeUri) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeUriRef) isEventAttributeValue_Attr() {}

func (*EventAttributeValue_CeTimestamp) isEventAttributeValue_Attr() {}

// EventBatch is a batch format.
type EventBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Events collection.
	Events []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *EventBatch) Reset() {
	*x = EventBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connect_runtime_v1_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventBatch) ProtoMessage() {}

func (x *EventBatch) ProtoReflect() protoreflect.Message {
	mi := &file_connect_runtime_v1_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventBatch.ProtoReflect.Descriptor instead.
func (*EventBatch) Descriptor() ([]byte, []int) {
	return file_connect_runtime_v1_event_proto_rawDescGZIP(), []int{4}
}

func (x *EventBatch) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

var File_connect_runtime_v1_event_proto protoreflect.FileDescriptor

var file_connect_runtime_v1_event_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x10, 0x50, 0x75,
	0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11,
	0x50, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc0, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x66, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x03, 0xf8, 0x42, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x63, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x1f, 0x0a,
	0x0a, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x09, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x09, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x63, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a,
	0x08, 0x63, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x06, 0x63, 0x65,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x88, 0x01, 0x01, 0x48, 0x00, 0x52, 0x05, 0x63, 0x65, 0x55, 0x72, 0x69, 0x12, 0x28, 0x0a,
	0x0a, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x90, 0x01, 0x01, 0x48, 0x00, 0x52, 0x08, 0x63,
	0x65, 0x55, 0x72, 0x69, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x04, 0x61, 0x74, 0x74, 0x72,
	0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x3f, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x31, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x32, 0x68, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x50, 0x75, 0x73, 0x68, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x75, 0x73, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0xd4, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x6c, 0x63, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x76, 0x31, 0xa2,
	0x02, 0x03, 0x43, 0x52, 0x58, 0xaa, 0x02, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x12, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5c, 0x56, 0x31, 0xe2,
	0x02, 0x1e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x14, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x3a, 0x3a, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_connect_runtime_v1_event_proto_rawDescOnce sync.Once
	file_connect_runtime_v1_event_proto_rawDescData = file_connect_runtime_v1_event_proto_rawDesc
)

func file_connect_runtime_v1_event_proto_rawDescGZIP() []byte {
	file_connect_runtime_v1_event_proto_rawDescOnce.Do(func() {
		file_connect_runtime_v1_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_connect_runtime_v1_event_proto_rawDescData)
	})
	return file_connect_runtime_v1_event_proto_rawDescData
}

var file_connect_runtime_v1_event_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_connect_runtime_v1_event_proto_goTypes = []interface{}{
	(*PushEventRequest)(nil),      // 0: connect.runtime.v1.PushEventRequest
	(*PushEventResponse)(nil),     // 1: connect.runtime.v1.PushEventResponse
	(*Event)(nil),                 // 2: connect.runtime.v1.Event
	(*EventAttributeValue)(nil),   // 3: connect.runtime.v1.EventAttributeValue
	(*EventBatch)(nil),            // 4: connect.runtime.v1.EventBatch
	nil,                           // 5: connect.runtime.v1.Event.AttributesEntry
	(*anypb.Any)(nil),             // 6: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_connect_runtime_v1_event_proto_depIdxs = []int32{
	2, // 0: connect.runtime.v1.PushEventRequest.event:type_name -> connect.runtime.v1.Event
	5, // 1: connect.runtime.v1.Event.attributes:type_name -> connect.runtime.v1.Event.AttributesEntry
	6, // 2: connect.runtime.v1.Event.proto_data:type_name -> google.protobuf.Any
	7, // 3: connect.runtime.v1.EventAttributeValue.ce_timestamp:type_name -> google.protobuf.Timestamp
	2, // 4: connect.runtime.v1.EventBatch.events:type_name -> connect.runtime.v1.Event
	3, // 5: connect.runtime.v1.Event.AttributesEntry.value:type_name -> connect.runtime.v1.EventAttributeValue
	0, // 6: connect.runtime.v1.EventService.PushEvent:input_type -> connect.runtime.v1.PushEventRequest
	1, // 7: connect.runtime.v1.EventService.PushEvent:output_type -> connect.runtime.v1.PushEventResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_connect_runtime_v1_event_proto_init() }
func file_connect_runtime_v1_event_proto_init() {
	if File_connect_runtime_v1_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connect_runtime_v1_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_runtime_v1_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_runtime_v1_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_runtime_v1_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventAttributeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connect_runtime_v1_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_connect_runtime_v1_event_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Event_BinaryData)(nil),
		(*Event_TextData)(nil),
		(*Event_ProtoData)(nil),
	}
	file_connect_runtime_v1_event_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*EventAttributeValue_CeBoolean)(nil),
		(*EventAttributeValue_CeInteger)(nil),
		(*EventAttributeValue_CeString)(nil),
		(*EventAttributeValue_CeBytes)(nil),
		(*EventAttributeValue_CeUri)(nil),
		(*EventAttributeValue_CeUriRef)(nil),
		(*EventAttributeValue_CeTimestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connect_runtime_v1_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connect_runtime_v1_event_proto_goTypes,
		DependencyIndexes: file_connect_runtime_v1_event_proto_depIdxs,
		MessageInfos:      file_connect_runtime_v1_event_proto_msgTypes,
	}.Build()
	File_connect_runtime_v1_event_proto = out.File
	file_connect_runtime_v1_event_proto_rawDesc = nil
	file_connect_runtime_v1_event_proto_goTypes = nil
	file_connect_runtime_v1_event_proto_depIdxs = nil
}
