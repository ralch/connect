// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connect/runtime/v1/health.proto

// This package is intended for internal use by connect-grpc-go, and provides
// no backward compatibility guarantees whatsoever. Apart from the package
// name, the schema here must remain wire compatible with the original.
//
// Copied from gRPC's health check schema, with small modifications to prevent
// init-time panics:
// https://github.com/grpc/grpc-proto/blob/master/grpc/health/v1/health.proto
package runtimev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/ralch/connect/internal/proto/connect/runtime/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// HealthServiceName is the fully-qualified name of the HealthService service.
	HealthServiceName = "connect.runtime.v1.HealthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthServiceCheckProcedure is the fully-qualified name of the HealthService's Check RPC.
	HealthServiceCheckProcedure = "/connect.runtime.v1.HealthService/Check"
	// HealthServiceWatchProcedure is the fully-qualified name of the HealthService's Watch RPC.
	HealthServiceWatchProcedure = "/connect.runtime.v1.HealthService/Watch"
)

// HealthServiceClient is a client for the connect.runtime.v1.HealthService service.
type HealthServiceClient interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.ServerStreamForClient[v1.HealthCheckResponse], error)
}

// NewHealthServiceClient constructs a client for the connect.runtime.v1.HealthService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) HealthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &healthServiceClient{
		check: connect_go.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+HealthServiceCheckProcedure,
			opts...,
		),
		watch: connect_go.NewClient[v1.HealthCheckRequest, v1.HealthCheckResponse](
			httpClient,
			baseURL+HealthServiceWatchProcedure,
			opts...,
		),
	}
}

// healthServiceClient implements HealthServiceClient.
type healthServiceClient struct {
	check *connect_go.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
	watch *connect_go.Client[v1.HealthCheckRequest, v1.HealthCheckResponse]
}

// Check calls connect.runtime.v1.HealthService.Check.
func (c *healthServiceClient) Check(ctx context.Context, req *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error) {
	return c.check.CallUnary(ctx, req)
}

// Watch calls connect.runtime.v1.HealthService.Watch.
func (c *healthServiceClient) Watch(ctx context.Context, req *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.ServerStreamForClient[v1.HealthCheckResponse], error) {
	return c.watch.CallServerStream(ctx, req)
}

// HealthServiceHandler is an implementation of the connect.runtime.v1.HealthService service.
type HealthServiceHandler interface {
	// If the requested service is unknown, the call will fail with status
	// NOT_FOUND.
	Check(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error)
	// Performs a watch for the serving status of the requested service.
	// The server will immediately send back a message indicating the current
	// serving status.  It will then subsequently send a new message whenever
	// the service's serving status changes.
	//
	// If the requested service is unknown when the call is received, the
	// server will send a message setting the serving status to
	// SERVICE_UNKNOWN but will *not* terminate the call.  If at some
	// future point, the serving status of the service becomes known, the
	// server will send a new message with the service's serving status.
	//
	// If the call terminates with status UNIMPLEMENTED, then clients
	// should assume this method is not supported and should not retry the
	// call.  If the call terminates with any other status (including OK),
	// clients should retry the call with appropriate exponential backoff.
	Watch(context.Context, *connect_go.Request[v1.HealthCheckRequest], *connect_go.ServerStream[v1.HealthCheckResponse]) error
}

// NewHealthServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthServiceHandler(svc HealthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(HealthServiceCheckProcedure, connect_go.NewUnaryHandler(
		HealthServiceCheckProcedure,
		svc.Check,
		opts...,
	))
	mux.Handle(HealthServiceWatchProcedure, connect_go.NewServerStreamHandler(
		HealthServiceWatchProcedure,
		svc.Watch,
		opts...,
	))
	return "/connect.runtime.v1.HealthService/", mux
}

// UnimplementedHealthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthServiceHandler struct{}

func (UnimplementedHealthServiceHandler) Check(context.Context, *connect_go.Request[v1.HealthCheckRequest]) (*connect_go.Response[v1.HealthCheckResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connect.runtime.v1.HealthService.Check is not implemented"))
}

func (UnimplementedHealthServiceHandler) Watch(context.Context, *connect_go.Request[v1.HealthCheckRequest], *connect_go.ServerStream[v1.HealthCheckResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("connect.runtime.v1.HealthService.Watch is not implemented"))
}
