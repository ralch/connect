// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: connect/runtime/v1/event.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PushEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushEventRequestMultiError, or nil if none found.
func (m *PushEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PushEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEvent() == nil {
		err := PushEventRequestValidationError{
			field:  "Event",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PushEventRequestValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PushEventRequestValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PushEventRequestMultiError(errors)
	}

	return nil
}

// PushEventRequestMultiError is an error wrapping multiple validation errors
// returned by PushEventRequest.ValidateAll() if the designated constraints
// aren't met.
type PushEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushEventRequestMultiError) AllErrors() []error { return m }

// PushEventRequestValidationError is the validation error returned by
// PushEventRequest.Validate if the designated constraints aren't met.
type PushEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushEventRequestValidationError) ErrorName() string { return "PushEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e PushEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushEventRequestValidationError{}

// Validate checks the field values on PushEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PushEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PushEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PushEventResponseMultiError, or nil if none found.
func (m *PushEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PushEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PushEventResponseMultiError(errors)
	}

	return nil
}

// PushEventResponseMultiError is an error wrapping multiple validation errors
// returned by PushEventResponse.ValidateAll() if the designated constraints
// aren't met.
type PushEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PushEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PushEventResponseMultiError) AllErrors() []error { return m }

// PushEventResponseValidationError is the validation error returned by
// PushEventResponse.Validate if the designated constraints aren't met.
type PushEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PushEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PushEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PushEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PushEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PushEventResponseValidationError) ErrorName() string {
	return "PushEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PushEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPushEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PushEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PushEventResponseValidationError{}

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, err := url.Parse(m.GetSource()); err != nil {
		err = EventValidationError{
			field:  "Source",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SpecVersion

	// no validation rules for Type

	{
		sorted_keys := make([]string, len(m.GetAttributes()))
		i := 0
		for key := range m.GetAttributes() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetAttributes()[key]
			_ = val

			// no validation rules for Attributes[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, EventValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, EventValidationError{
							field:  fmt.Sprintf("Attributes[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return EventValidationError{
						field:  fmt.Sprintf("Attributes[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *Event_BinaryData:
		if v == nil {
			err := EventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for BinaryData
	case *Event_TextData:
		if v == nil {
			err := EventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for TextData
	case *Event_ProtoData:
		if v == nil {
			err := EventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetProtoData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ProtoData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventValidationError{
						field:  "ProtoData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProtoData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventValidationError{
					field:  "ProtoData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := EventValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on EventAttributeValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventAttributeValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventAttributeValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventAttributeValueMultiError, or nil if none found.
func (m *EventAttributeValue) ValidateAll() error {
	return m.validate(true)
}

func (m *EventAttributeValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofAttrPresent := false
	switch v := m.Attr.(type) {
	case *EventAttributeValue_CeBoolean:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true
		// no validation rules for CeBoolean
	case *EventAttributeValue_CeInteger:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true
		// no validation rules for CeInteger
	case *EventAttributeValue_CeString:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true
		// no validation rules for CeString
	case *EventAttributeValue_CeBytes:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true
		// no validation rules for CeBytes
	case *EventAttributeValue_CeUri:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true

		if uri, err := url.Parse(m.GetCeUri()); err != nil {
			err = EventAttributeValueValidationError{
				field:  "CeUri",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := EventAttributeValueValidationError{
				field:  "CeUri",
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *EventAttributeValue_CeUriRef:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true

		if _, err := url.Parse(m.GetCeUriRef()); err != nil {
			err = EventAttributeValueValidationError{
				field:  "CeUriRef",
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *EventAttributeValue_CeTimestamp:
		if v == nil {
			err := EventAttributeValueValidationError{
				field:  "Attr",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofAttrPresent = true

		if all {
			switch v := interface{}(m.GetCeTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventAttributeValueValidationError{
						field:  "CeTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventAttributeValueValidationError{
						field:  "CeTimestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCeTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventAttributeValueValidationError{
					field:  "CeTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofAttrPresent {
		err := EventAttributeValueValidationError{
			field:  "Attr",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return EventAttributeValueMultiError(errors)
	}

	return nil
}

// EventAttributeValueMultiError is an error wrapping multiple validation
// errors returned by EventAttributeValue.ValidateAll() if the designated
// constraints aren't met.
type EventAttributeValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventAttributeValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventAttributeValueMultiError) AllErrors() []error { return m }

// EventAttributeValueValidationError is the validation error returned by
// EventAttributeValue.Validate if the designated constraints aren't met.
type EventAttributeValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventAttributeValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventAttributeValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventAttributeValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventAttributeValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventAttributeValueValidationError) ErrorName() string {
	return "EventAttributeValueValidationError"
}

// Error satisfies the builtin error interface
func (e EventAttributeValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventAttributeValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventAttributeValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventAttributeValueValidationError{}

// Validate checks the field values on EventBatch with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EventBatch) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventBatch with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EventBatchMultiError, or
// nil if none found.
func (m *EventBatch) ValidateAll() error {
	return m.validate(true)
}

func (m *EventBatch) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EventBatchValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EventBatchValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return EventBatchMultiError(errors)
	}

	return nil
}

// EventBatchMultiError is an error wrapping multiple validation errors
// returned by EventBatch.ValidateAll() if the designated constraints aren't met.
type EventBatchMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventBatchMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventBatchMultiError) AllErrors() []error { return m }

// EventBatchValidationError is the validation error returned by
// EventBatch.Validate if the designated constraints aren't met.
type EventBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventBatchValidationError) ErrorName() string { return "EventBatchValidationError" }

// Error satisfies the builtin error interface
func (e EventBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventBatchValidationError{}
